rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Функция проверки аутентификации
    function isAuthenticated() {
      return request.auth != null;
    }

    // Функция проверки роли
    function hasRole(role) {
      return request.auth.token.role == role;
    }

    // Общие правила для всех коллекций
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || hasRole('admin'));
      allow write: if isAuthenticated() && (request.auth.uid == userId || hasRole('admin'));
    }

    // Профили пользователей
    match /user_profiles/{profileId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == profileId;
      allow update: if isAuthenticated() && 
        (request.auth.uid == profileId || hasRole('admin'));
    }

    // Настройки пользователей
    match /user_settings/{settingsId} {
      allow read, write: if isAuthenticated() && request.auth.uid == settingsId;
    }

    // Задачи
    match /tasks/{taskId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasRole('instructor', 'admin');
      allow update, delete: if isAuthenticated() && 
        (hasRole('instructor', 'admin') || request.auth.uid == resource.data.assignedTo);
    }

    // Курсы
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && hasRole('admin', 'instructor');
    }

    // Экзамены
    match /exams/{examId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && hasRole('instructor', 'admin');
      allow update, delete: if isAuthenticated() && hasRole('admin');
    }

    // Системные метаданные (только для чтения)
    match /system_metadata/{docId} {
      allow read: if isAuthenticated();
    }

    // Справочники (только для чтения)
    match /references/{docId} {
      allow read: if isAuthenticated();
    }
  }
}
